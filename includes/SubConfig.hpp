#ifndef SUBCONFIG_HPP
# define SUBCONFIG_HPP

#include <iostream>
#include <string>
#include <map>
#include <vector>
#include <sstream>
#include <fstream>
#include <iomanip>
#include <cstdlib>
#include <cstring>
#include "utils/colors.hpp"
#include "utils/msg_sys.hpp"
#include "utilsConfig.hpp"

///////////////////////////////////////////////////////////////////////////////
//											S E P A R A T O R in config file
///////////////////////////////////////////////////////////////////////////////
#define SEP					std::string(":")

///////////////////////////////////////////////////////////////////////////////
//															T E M P L A T E S
///////////////////////////////////////////////////////////////////////////////
#define TEMPLATE_MAIN			"./config/templates/template_main.conf"
#define TEMPLATE_MAIN_SERV		"./config/templates/template_server_main.conf"
#define TEMPLATE_LOCATION		"./config/templates/template_location.conf"

///////////////////////////////////////////////////////////////////////////////
//																	M O D E S
///////////////////////////////////////////////////////////////////////////////
#define MAIN				0
#define LOCATION			1
#define SERVER				2

enum location_type {Null, Folder, File, Extension};


class SubConfig
{

///////////////////////////////////////////////////////////////////////////////
//															A T T R I B U T E S
///////////////////////////////////////////////////////////////////////////////
	private:

		std::map<std::string, std::string>	_configMap;
		size_t								_mode; // MAIN 0 | LOCATION 1 | SERVER 2
		std::string							_locationName;


///////////////////////////////////////////////////////////////////////////////
//											private C O N S T R U C T O R S
///////////////////////////////////////////////////////////////////////////////
	private:

							SubConfig();

///////////////////////////////////////////////////////////////////////////////
//									private P A R S I N G  F U N C T I O N S
///////////////////////////////////////////////////////////////////////////////
		void				add_cgi(std::string const & line);
		int					initTemplate(const char * filename);




	public:

///////////////////////////////////////////////////////////////////////////////
//										C O N S T R U C T O R S & destructor
///////////////////////////////////////////////////////////////////////////////
							SubConfig(int const mode);
							SubConfig(const SubConfig & x);
							~SubConfig();

///////////////////////////////////////////////////////////////////////////////
//												relationnal O P E R A T O R S
///////////////////////////////////////////////////////////////////////////////
		SubConfig &			operator = (const SubConfig & x);

///////////////////////////////////////////////////////////////////////////////
//																S E T T E R S
///////////////////////////////////////////////////////////////////////////////
		void				setLocationName(std::string const &);

///////////////////////////////////////////////////////////////////////////////
//									private P A R S I N G  F U N C T I O N S
///////////////////////////////////////////////////////////////////////////////
		int					addLine(std::string const & line, bool const initTemplate);

///////////////////////////////////////////////////////////////////////////////
//																G E T T E R S
///////////////////////////////////////////////////////////////////////////////
		std::string	const &	getName()										const;

		std::string const &	getValue(std::string const &, std::string	type)const;
		int					getValue(std::string const &, int			type)const;
		float				getValue(std::string const &, float			type)const;
		size_t				getValue(std::string const &, size_t		type)const;
		bool				isMethodAllowed(std::string const &)			 const;
		int					whatLocationType()								 const;
		std::pair<bool, std::string> getMatchCgi(std::string const &)		 const;

///////////////////////////////////////////////////////////////////////////////
//																D I S P L A Y
///////////////////////////////////////////////////////////////////////////////
		void				display_log(bool verbose = 0)	const;

};

///////////////////////////////////////////////////////////////////////////////
//												non-members F U N C T I O N S
///////////////////////////////////////////////////////////////////////////////
int		checker(std::string const & key, std::string const & value);


#endif
